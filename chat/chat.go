// Code generated by goctl. DO NOT EDIT!
// Source: chat.proto

package chat

import (
	"context"

	"github.com/acger/chat-svc/pb/chat"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CHSaveReq      = chat.CHSaveReq
	ChatHistoryReq = chat.ChatHistoryReq
	ChatHistoryRsp = chat.ChatHistoryRsp
	ChatMessage    = chat.ChatMessage
	ChatNumberReq  = chat.ChatNumberReq
	ChatNumberRsp  = chat.ChatNumberRsp
	ChatUser       = chat.ChatUser
	MsgListReq     = chat.MsgListReq
	MsgListRsp     = chat.MsgListRsp
	MsgSaveReq     = chat.MsgSaveReq
	Rsp            = chat.Rsp

	Chat interface {
		MessageSave(ctx context.Context, in *MsgSaveReq, opts ...grpc.CallOption) (*Rsp, error)
		MessageList(ctx context.Context, in *MsgListReq, opts ...grpc.CallOption) (*MsgListRsp, error)
		ChatHistoryList(ctx context.Context, in *ChatHistoryReq, opts ...grpc.CallOption) (*ChatHistoryRsp, error)
		ChatNumber(ctx context.Context, in *ChatNumberReq, opts ...grpc.CallOption) (*ChatNumberRsp, error)
		ChatHistorySave(ctx context.Context, in *CHSaveReq, opts ...grpc.CallOption) (*Rsp, error)
	}

	defaultChat struct {
		cli zrpc.Client
	}
)

func NewChat(cli zrpc.Client) Chat {
	return &defaultChat{
		cli: cli,
	}
}

func (m *defaultChat) MessageSave(ctx context.Context, in *MsgSaveReq, opts ...grpc.CallOption) (*Rsp, error) {
	client := chat.NewChatClient(m.cli.Conn())
	return client.MessageSave(ctx, in, opts...)
}

func (m *defaultChat) MessageList(ctx context.Context, in *MsgListReq, opts ...grpc.CallOption) (*MsgListRsp, error) {
	client := chat.NewChatClient(m.cli.Conn())
	return client.MessageList(ctx, in, opts...)
}

func (m *defaultChat) ChatHistoryList(ctx context.Context, in *ChatHistoryReq, opts ...grpc.CallOption) (*ChatHistoryRsp, error) {
	client := chat.NewChatClient(m.cli.Conn())
	return client.ChatHistoryList(ctx, in, opts...)
}

func (m *defaultChat) ChatNumber(ctx context.Context, in *ChatNumberReq, opts ...grpc.CallOption) (*ChatNumberRsp, error) {
	client := chat.NewChatClient(m.cli.Conn())
	return client.ChatNumber(ctx, in, opts...)
}

func (m *defaultChat) ChatHistorySave(ctx context.Context, in *CHSaveReq, opts ...grpc.CallOption) (*Rsp, error) {
	client := chat.NewChatClient(m.cli.Conn())
	return client.ChatHistorySave(ctx, in, opts...)
}
